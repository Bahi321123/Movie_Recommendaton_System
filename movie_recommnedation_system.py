# -*- coding: utf-8 -*-
"""Movie_Recommnedation_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U8_bk4KAjB3eg7V29W79DXvlAaT-Tpk9

## Movie_Recommemdation_System
Explanation:

pandas → handles dataset loading and manipulation

numpy → supports numerical calculations

TfidfVectorizer → converts text into numerical form for similarity calculation

linear_kernel → finds similarities between movies based on their descriptions

Importiing Libraries
"""

# Import libraries
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import urllib.request, zipfile

# Download MovieLens small dataset
url = "https://files.grouplens.org/datasets/movielens/ml-latest-small.zip"
zip_path = "ml-latest-small.zip"
urllib.request.urlretrieve(url, zip_path)

# Extract dataset
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(".")

# Load ratings & movies
movies = pd.read_csv("ml-latest-small/movies.csv")

# Fill missing genres
movies['genres'] = movies['genres'].fillna('')

print(f"✅ Dataset loaded: {movies.shape[0]} movies")

"""Model BUILDING"""

# TF-IDF Vectorization on genres
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(movies['genres'])

# Compute cosine similarity
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Helper: Get index from title
indices = pd.Series(movies.index, index=movies['title']).drop_duplicates()

def recommend_movies(title, num_recommendations=5):
    if title not in indices:
        return f"❌ Movie '{title}' not found in database."

    idx = indices[title]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:num_recommendations+1]
    movie_indices = [i[0] for i in sim_scores]

    return movies.iloc[movie_indices][['title', 'genres']]

""" INterractive UI"""

from IPython.display import display
import ipywidgets as widgets

# Input field for movie name
movie_input = widgets.Text(
    value='Toy Story (1995)',
    placeholder='Type a movie name...',
    description='Movie:',
    disabled=False
)

# Slider for number of recommendations
num_slider = widgets.IntSlider(
    value=5,
    min=1,
    max=20,
    step=1,
    description='Top N:',
    continuous_update=False
)

# Button to get recommendations
button = widgets.Button(description="Get Recommendations", button_style='success')

# Output area
output = widgets.Output()

def on_button_click(b):
    output.clear_output()
    with output:
        recs = recommend_movies(movie_input.value, num_slider.value)
        if isinstance(recs, str):
            print(recs)
        else:
            display(recs)

button.on_click(on_button_click)

# Show UI
display(movie_input, num_slider, button, output)

